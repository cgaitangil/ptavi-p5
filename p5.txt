 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:

 ** ¿Cuántos paquetes componen la captura?
 
    954 paquetes.
    
 ** ¿Cuánto tiempo dura la captura?
 
    56.149345 s
 
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
 
    Como la captura no está en modo 'promiscuo' (capturamos todos los paquetes que pasan por la red sin saber el destino ni el origen) podemos saber cual es la máquina donde realizamos la captura. --> 192.168.1.34. 
    Se trata de una IP privada, ya que comienza por 192.168.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.

 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
 
    Es mayor el protocolo UDP.
    Es consistente, ya que utiliza el protocolo RTP (Real-Time Transport Protocol) pero sin garantizar la llegada de los paquetes sin pérdidas y de forma ordenada.
 
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
 
    UDP --> STP, SIP, RTP, RTCP
    TCP --> HTTP


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.

 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
 
    Segs --> 7, 14, 16, 38, 39 y 55.
 
 ** Y los paquetes con RTP, ¿cuándo se envían?
 
    Segs --> [16, 21]U[23, 39]
    

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.

 ** ¿Qué servicio es el utilizado en estas tramas?
 
    Servicio DNS de nombres, para pedir el servidor DNS de una IP o la IP de un nombre DNS.
 
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
 
    A la que se le envía la petición de DNS, 80.58.61.250.
 
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
 
    Servidor de nombres --responde--> 86.64.162.35.
 
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
    
    Es la resolución inversa que realiza el protocolo.


6. A continuación, hay más de una docena de tramas TCP/HTTP.

 ** ¿Podrías decir la URL que se está pidiendo?
 
    HTTP/Content-Length/Full request --> http://ekiga.net/ip/
 
 ** ¿Qué user agent (UA) la está pidiendo?
 
    HTTP/GET/User-Agent --> Ekiga
 
 ** ¿Qué devuelve el servidor?
 
    Devuelve una dirección IP --> 83.36.48.212 (dirección pública de 192.168.1.34)
 
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
 
    Recibimos una dirección IP --> 212.128.254.151 (En los labos será igual que la que aparezca en ifconfig ya que no estamos detrás de ningún NAT).
    Lo que responde el servidor es la dirección IP pública de la máquina que está detrás del NAT, con el que este servidor le ve (83.36.48.212), distinta de la dirección privada de la misma (192.168.1.34).


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.

    'STUN (Session Traversal Utilities for NAT) es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT'.

 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
 
    Usamos este protocolo ya que estamos en una situación en la que una máquina quiere comunicarse estando detrás de un router NAT.
 
 ** ¿Estamos tras un NAT?

    La máquina cuya dirección privada es 192.168.1.34 se encuentra detrás de un NAT qu8e provoca que dicha máquina se vea con dirección pública 83.36.48.212   


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.

 ** ¿Qué dirección IP tiene el servidor Registrar?
 
    LA dirección a la que se envía el paquete con el métido REGISTER en la cabecera --> 86.64.162.35
 
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
 
    'Via: SIP/2.0/UDP 83.36.48.212:5063' --> puerto 5063.
 
 ** ¿Qué método SIP utiliza el UA para registrarse?
 
    Método REGISTER.
 
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

    Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE --> Permite, además, estos métodos.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:

 ** ¿Se registra con éxito en el primer intento?
 
    No , el servidor registrar envía al solicitante un mensaje de error: 401 Unauthorized
 
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
 
    Una vez que se envía el segundo intento con el método REGISTER y el servidor registrar envía un mensaje de confirmación 200 OK (paquete 54).
 
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
 
    El primer intento tiene un tamaño de 523 y el segundo de 712.
    El 2º intento contiene una cabecera como la siguiente:
        'Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439ee7438aaea43ae8c7c2382922187f86c8b", uri="sip:ekiga.net", algorithm=md5, response="5267d4e49d707d4443baefa913e8ff90"'
    Cuyos valores le permitirán registrarse con éxito en esta ocasión.
    
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

    Expires: 3600 seg.


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.

 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
 
    From: "Gregorio Robles" <sip:grex@ekiga.net> En este campo podemos ver el nombre y la dirección SIP del que realiza la petición (INVITE).
 
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
 
    _______________________________________
 
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
 
    El primer intento no tiene éxito, ya que necesita una autenticación del proxy y  más abajo en la captura se vuelve a intentar el mismo método (paquete 103) siendo confirmado por el paquete 105.
 
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
 
    En el tamaño, midiendo el primero 982 y el segundo 1181.
    El segundo paquete tiene un mayor tamaño ya que, además, envía una autorización del proxy previamente pedida por el servidor en el primer intento.
    

11. Una vez conectado, estudia el intercambio de tramas
.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
 
    Se utilizan los protocolos RTP (Real-Time Transport Protocol) bajo el protocolo UDP para enviar los paquetes y H.261 para codificar video.
 
 ** ¿Cuál es el tamaño de paquete de los mismos?
 
    El tamaño de los paquetes que se envían con el protocolo RTP es de 214.
 
 ** ¿Se utilizan bits de padding?
 
    ..0. .... = Padding: False --> No se utilizan.
 
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
 
    Hay 160 seg entre paquete y paquete de este protocolo.
 
 ** ¿Cuántos bits/segundo estamos enviando?

    ___________________________________________


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.

 ** ¿Cuántos flujos hay? ¿por qué?
 
 
 
 ** ¿Cuántos paquetes se pierden?
 
 
 
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
 
 
 
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
 
 


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.

 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
 
 
 
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
 
 
 
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
 
 
 
 ** ¿A qué se debe el cambio tan brusco del jitter?
 
 
 
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
 
 
 
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
 
 


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.

 ** ¿Cuánto dura la conversación?
 
 
 
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
 
 


15. Identifica la trama donde se finaliza la conversación.

 ** ¿Qué método SIP se utiliza?
 
 
 
 ** ¿En qué trama(s)?
 
 
 
 ** ¿Por qué crees que se envía varias veces?
 
 


16. Finalmente, se cierra la aplicación de VozIP.

 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 
 
 
 ** ¿En qué trama sucede esto?
 
 
 
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?




[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
